# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u-GxwdzxdXT8obtnqIZlrO07E9rAM3SZ
"""

! sudo apt-get install tesseract-ocr

! pip install pytesseract

!sudo apt-get install tesseract-ocr-por

!mkdir tessdata
!wget -O tessdata/por.traineddata https://github.com/tesseract-ocr/tessdata/blob/main/por.traineddata?raw=true

import pytesseract
import cv2
from google.colab.patches import cv2_imshow
import seaborn as sns
import re
import numpy as np
from skimage.segmentation import clear_border

imagem = cv2.cvtColor(cv2.imread('/content/placa_carro1.png'), cv2.COLOR_BGR2GRAY)
cv2_imshow(imagem)

config_tesseract = '--tessdata-dir tessdata '
texto = pytesseract.image_to_string(imagem, lang='por', config=config_tesseract)
print(texto)

!tesseract --help-psm

limiar = 170
valor, lim_simples = cv2.threshold(imagem, limiar, 255, cv2.THRESH_BINARY)
cv2_imshow(lim_simples)

lim_adapt = cv2.adaptiveThreshold(imagem, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 8)
cv2_imshow(lim_adapt)

imagem

ax = sns.histplot(imagem.flatten())
ax.figure.set_size_inches(10, 5)

valor, lim_otsu = cv2.threshold(imagem, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
cv2_imshow(lim_otsu)
print(f'Lmiar: {valor}')

config_tesseract = 'tessdata-dir tessdata'
texto = pytesseract.image_to_string(lim_otsu, lang='por', config=config_tesseract)
print(texto)

kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))

erosao = cv2.erode(lim_otsu, kernel)
cv2_imshow(erosao)

abertura = cv2.morphologyEx(lim_otsu, cv2.MORPH_OPEN, kernel)
cv2_imshow(abertura)

fechamento = cv2.morphologyEx(lim_otsu, cv2.MORPH_CLOSE, kernel)
cv2_imshow(fechamento)

gradiente = cv2.morphologyEx(lim_otsu, cv2.MORPH_GRADIENT, kernel)
cv2_imshow(gradiente)

cartola = cv2.morphologyEx(lim_otsu, cv2.MORPH_TOPHAT, kernel)
cv2_imshow(cartola)



kernel_retangular = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 13))
cartola = cv2.morphologyEx(lim_otsu, cv2.MORPH_TOPHAT, kernel_retangular)
cv2_imshow(cartola)

cartola = cv2.morphologyEx(imagem, cv2.MORPH_TOPHAT, kernel_retangular)
cv2_imshow(cartola)

chapeu_preto = cv2.morphologyEx(lim_otsu, cv2.MORPH_BLACKHAT, kernel_retangular)
cv2_imshow(chapeu_preto)

chapeu_preto = cv2.morphologyEx(imagem, cv2.MORPH_BLACKHAT, kernel_retangular)
cv2_imshow(chapeu_preto)

#Texto basedo na melhor morfologisação para a imagem
config_tesseract = 'tessdata-dir tessdata --psm 6'
texto = pytesseract.image_to_string(erosao, lang='por', config=config_tesseract)
print(texto)

bordas = cv2.Canny(imagem, 100, 200)
cv2_imshow(bordas)

bordas_erosao = cv2.Canny(erosao, 100, 200)
cv2_imshow(bordas_erosao)

contornos, hierarquia = cv2.findContours(bordas, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contornos

for controno in contornos:
  epsilon = 0.02 * cv2.arcLength(controno, True)
  approx = cv2.approxPolyDP(controno, epsilon, True)
  if cv2.isContourConvex(approx) and len(approx) == 4:
    localizacao = approx
    break

localizacao

x, y, w, h = cv2.boundingRect(localizacao)

placa = imagem[y:y+h, x:x+w]
cv2_imshow(placa)

valor, lim_otsu = cv2.threshold(placa, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
erosao_placa = cv2.erode(lim_otsu, cv2.getStructuringElement(cv2.MORPH_RECT, (4, 4)))
cv2_imshow(erosao_placa)

b1 = 'tessdata-dir tessdata --psm 6'

text = pytesseract.image_to_string(erosao_placa, lang='por', config=b1)
print(type(text))
print('A placa tem:', len(text), 'caracteres')
if type(text) == str and len(text) != 0:
  print(text)
  len(text)
else:
  print('Nenhum texto encontrado')

texto_extraido = re.search('\w{3}\d{1}\w{2}\d{2}', texto)
texto_extraido

"""Novo teste de extrassão de placa"""

imagem = cv2.imread('/content/placa_carro2.jpg')
imagem = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
cv2_imshow(imagem)

bordas = cv2.Canny(imagem, 100, 200)
cv2_imshow(bordas)

contronos, hierarquia = cv2.findContours(bordas, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contornos = sorted(contronos, key=cv2.contourArea, reverse=True)[:10]

for contorno in contornos:
  epsilon = 0.02 * cv2.arcLength(contorno, True)
  approx = cv2.approxPolyDP(contorno, epsilon, True)
  if cv2.isContourConvex(approx) and len(approx) == 4:
    localizacao = approx
    break

x, y, w, h = cv2.boundingRect(localizacao)

placa = imagem[y:y+h, x:x+w]
cv2_imshow(placa)

valor, lim_otsu = cv2.threshold(placa, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
cv2_imshow(lim_otsu)

texto = pytesseract.image_to_string(lim_otsu, lang='por')
print(texto)

texto_extraido = re.search('\w{3}\d{1}\w{2}\d{2}', texto)
texto_extraido

"""Nova Imagem"""

imagem = cv2.imread('/content/placa_carro3.jpg')
imagem = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
cv2_imshow(imagem)

kernel_retangula = cv2.getStructuringElement(cv2.MORPH_RECT, (40, 13))
chapeu_preto = cv2.morphologyEx(imagem, cv2.MORPH_BLACKHAT, kernel_retangula)
cv2_imshow(chapeu_preto)

sobel_x = cv2.Sobel(chapeu_preto, ddepth = cv2.CV_32F, dx = 1, dy = 0, ksize = 1)
sobel_x = np.absolute(sobel_x)
sobel_x = sobel_x.astype('uint8')
cv2_imshow(sobel_x)

sobel_x = cv2.GaussianBlur(sobel_x, (5, 5), 0)
sobel_x = cv2.morphologyEx(sobel_x, cv2.MORPH_CLOSE, kernel_retangula)
cv2_imshow(sobel_x)
valor, limiarizacao = cv2.threshold(sobel_x, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
cv2_imshow(limiarizacao)

kernel_quadrado = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
limiarizacao = cv2.erode(limiarizacao, kernel_quadrado)
limiarizacao = cv2.dilate(limiarizacao, kernel_quadrado, iterations=2)

cv2_imshow(limiarizacao)

fechamento = cv2.morphologyEx(imagem, cv2.MORPH_CLOSE, kernel_quadrado)
valor, mascara = cv2.threshold(fechamento, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
cv2_imshow(mascara)

limiarizacao = cv2.bitwise_and(limiarizacao, limiarizacao, mask = mascara)
limiarizacao = cv2.dilate(limiarizacao, kernel_quadrado, iterations = 2)
limiarizacao = cv2.erode(limiarizacao, kernel_quadrado)
cv2_imshow(limiarizacao)

limiarizacao = clear_border(limiarizacao)
cv2_imshow(limiarizacao)

contrornos, hierarquia = cv2.findContours(limiarizacao, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contornos = sorted(contrornos, key=cv2.contourArea, reverse=True)[:10]
contornos

for contorno in contornos:
  x, y, w, h = cv2.boundingRect(contorno)
  proporcao = float(w) / h
  if proporcao >= 3 and proporcao <= 3.5:
    placa = imagem[y:y+h, x:x+w]
    valor, regiao_interesse = cv2.threshold(placa, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    regiao_interesse = clear_border(regiao_interesse)
    cv2_imshow(placa)
    cv2_imshow(regiao_interesse)
    break

texto = pytesseract.image_to_string(regiao_interesse, lang='por')
print(texto)

texto_extraido = re.search('\w{3}\d{1}\w{2}\d{2}', texto)
if texto_extraido:
    print(texto_extraido.group(0))
else:
    print("No match found.")



